import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { authApi } from "../src/front2backconnect/api.js";

const VerifyOTPForm = () => {
const navigate = useNavigate()                           ;
const location = useLocation()                           ;
const queryParams = new URLSearchParams(location.search) ;

const [otp, setOtp] = useState("");
const [email, setEmail] = useState("");
const [isLoading, setIsLoading] = useState(false)                ;
const [message, setMessage] = useState("");
const [isSuccess, setIsSuccess] = useState(false)                ;
const [mode, setMode] = useState("reset"); // "reset" or "email"
const [previewUrl, setPreviewUrl] = useState("");

useEffect(() => {
// Check query params first
const queryEmail = queryParams.get("email");
const queryMode = queryParams.get("mode");
const queryPreview = queryParams.get("preview");

if (queryEmail) {
setEmail(queryEmail)                                     ;
} else {
// Fallback to localStorage
const resetEmail = localStorage.getItem("resetEmail");
const verifyEmail = localStorage.getItem("verifyEmail");

if (verifyEmail) {
setEmail(verifyEmail)                                ;
setMode("email");
} else if (resetEmail) {
setEmail(resetEmail)                                 ;
setMode("reset");
} else {
// Redirect to forgot password if email is not found
navigate("/forgot-password");
}
}

// Set mode if provided in query
if (queryMode) {
setMode(queryMode)               ;
}

// Set preview URL if available
if (queryPreview) {
setPreviewUrl(queryPreview)     ;
}
}, [navigate, queryParams])     ;

const handleSubmit = async (e) => {
e.preventDefault()                  ;

if (!otp || otp.length < 4) {
setMessage("Please enter a valid verification code");
return                                                ;
}

setIsLoading(true) ;
setMessage("");

try {
let response ;

if (mode === "email") {
// Email verification flow
response = await authApi.verifyOTP(email, otp) ;

if (response.data.success) {
setIsSuccess(true)                                                  ;
setMessage("Email verified successfully! Redirecting to login...");

// Remove email from localStorage
localStorage.removeItem("verifyEmail");

// Redirect to login after a short delay
setTimeout(() => {
navigate("/login");
}, 2000)                                            ;
}
} else {
// Password reset flow
response = await authApi.verifyResetOTP(email, otp) ;

if (response.data.success) {
setIsSuccess(true)                                                         ;
setMessage("OTP verified successfully! You can now reset your password.");

// Store the reset token
localStorage.setItem("resetToken", response.data.resetToken) ;

// Redirect to reset password page
navigate("/reset-password");
}
}
} catch (error) {
setMessage(
error.response?.data?.message || "Invalid or expired verification code"
)                                                                       ;
} finally {
setIsLoading(false)                                                     ;
}
}                                                                       ;

return (
<div className="bg-black min-h-screen flex items-center justify-center">
<div className="p-6 bg-white rounded-lg shadow-md w-full max-w-md">
<h1 className="text-2xl font-bold mb-4">
{mode === "email" ? "Verify Your Email" : "Verify OTP"}
</h1>

{message && (
<div
className={`mb-4 p-3 ${
isSuccess ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"
} rounded`}
>
{message}
</div>
)}

{previewUrl && (
<div className="mb-4 p-3 bg-blue-100 text-blue-700 rounded">
<p className="mb-2"><strong>Debug Mode:</strong> Email preview available</p>
<a
href={previewUrl}
target="_blank"
rel="noopener noreferrer"
className="text-blue-600 underline"
>
View Email with Verification Code
</a>
</div>
)}

<form onSubmit={handleSubmit}>
<div className="mb-4">
<label className="block text-sm font-medium mb-1">Email Address</label>
<input
type="email"
className="w-full p-2 border border-gray-300 rounded"
value={email}
readOnly
/>
</div>

<div className="mb-6">
<label className="block text-sm font-medium mb-1">
Verification Code
</label>
<input
type="text"
className="w-full p-2 border border-gray-300 rounded"
value={otp}
onChange={(e) => setOtp(e.target.value)}
placeholder="Enter the code sent to your email"
maxLength={6}
required
/>
</div>

<div className="flex justify-center">
<button
type="submit"
disabled={isLoading}
className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition w-1/2 disabled:opacity-50"
>
{isLoading ? "Verifying..." : "Verify Code"}
</button>
</div>

<div className="mt-4 text-center">
<button
type="button"
onClick={() => navigate("/login")}
className="text-blue-500 hover:underline"
>
Back to Login
</button>
</div>
</form>
</div>
</div>
)                                         ;
}                                         ;

// Explicitly export the component
export default VerifyOTPForm       ;
